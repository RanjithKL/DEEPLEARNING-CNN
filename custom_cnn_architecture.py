# -*- coding: utf-8 -*-
"""Custom_CNN_Architecture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZy5t7OpPddK1esVfdZGDGU2j523O_QO

- Checking the Name of GPU
"""

!nvidia-smi

"""- Import packages which are required"""

import numpy as np 
import matplotlib.pyplot as plt

dog_1 = plt.imread('/content/drive/MyDrive/dataset/training_set/dogs/dog.1.jpg')
plt.imshow(dog_1)

cat_1 = plt.imread('/content/drive/MyDrive/dataset/training_set/cats/cat.1.jpg')
plt.imshow(cat_1)

"""- **Training The CNN **"""

data_set_path = '/content/drive/MyDrive/dataset' # root folder

"""- Train data path and test data path """

train_data_path = '/content/drive/MyDrive/dataset/training_set'

test_data_path = '/content/drive/MyDrive/dataset/test_set'

"""- fixed size """

img_width , img_height = 150,150

"""- glog is used to find the number of folder inside a folder"""

import glob

from glob import glob 
glob('/content/drive/MyDrive/dataset/training_set/*')  # * is used to find number of folders inside a folder

from glob import glob 
glob('/content/drive/MyDrive/dataset/test_set/*')  # * is used to find number of folders inside a folder

"""- Data Augumentation Means 1 image converts into multiple image 
- Transformation means changing the images as linear format 
"""

import tensorflow
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator

preprocess_train_data = ImageDataGenerator(rescale = 1./255,
                                           shear_range = 0.2,
                                           horizontal_flip = True,
                                           zoom_range = 0.2)

preprocess_test_data = ImageDataGenerator(rescale = 1./255)

labels = ['cats','dogs']

train_data = preprocess_train_data.flow_from_directory(train_data_path , target_size = (img_height,img_width) , classes = labels , class_mode = 'binary' , batch_size = 32)

test_data =  preprocess_test_data.flow_from_directory(test_data_path , target_size = (img_height,img_width) , classes = labels , class_mode = 'binary' , batch_size = 32)

"""- Develop Custom CNN Architecture """

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Activation
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.activations import sigmoid,relu,softmax

"""- Architecture """

model = Sequential()
# first kernel and max poo layers
model.add(Conv2D(128 , kernel_size = (3,3) , input_shape = (img_height,img_width,3) , padding='same',activation='relu'))
model.add(MaxPool2D(pool_size = (2,2)))
# second kernel and max poo layers
model.add(Conv2D(64 , kernel_size = (3,3), padding='same',activation='relu'))
model.add(MaxPool2D(pool_size = (2,2)))
# third kernel and max poo layers
model.add(Conv2D(32 , kernel_size = (3,3), padding='same',activation='relu'))
model.add(MaxPool2D(pool_size = (2,2)))
# forth kernel and max poo layers
model.add(Conv2D(6 , kernel_size = (3,3), padding='same',activation='relu'))
model.add(MaxPool2D(pool_size = (2,2)))
model.add(Flatten()) # one dimensional array
# above 1d data give to ANN 
model.add(Dense(32,activation='relu')) # hiddel layer 1
model.add(Dense(16,activation = 'relu')) # hiddel layer 2
# output layer 
model.add(Dense(1,activation='sigmoid'))

model.summary()

"""Need to define optimizer , loss function and metric """

model.compile(optimizer = 'adam' , loss = 'binary_crossentropy',metrics = ['Accuracy'])

"""- Training Begins """

model.fit(train_data , epochs = 50)

"""Checking the key values"""

model.history.history.keys()

training_loss = model.history.history['loss']

training_loss

training_acc = model.history.history['Accuracy']
training_acc

"""EDA for Model validation """

plt.figure(figsize = (5,5))
plt.title('Cat and Dog classification Training Report')
plt.plot(np.arange(1,51) , training_loss , color = 'b',label = 'loss')
plt.plot(np.arange(1,51) , training_acc , color = 'r',label = 'Acc')
plt.legend(loc = 0)
plt.show()

"""- Since the training accuracy is 92 % with 8005 images we can say out own CNN model is really trained well.

- If our Trained model is working well with test data then only we can say our model is working fine or else we can say there is an overfitting problem

Now its time to checking the validation report [performance for test data]
"""

# 2023 images 
# 1000 - cat 
# 1000 - dog

# Actual dependent values will be consider as 
test_data.classes

test_data.classes[:1010]

test_data.classes[1010:]

y_test_pred = model.predict(test_data)

y_test_pred

# converting probability values into 0 and 1 class for checking performance report 
c = []
for i in y_test_pred:
  for j in i:
    if j > 0.5:
      c.append(1)
    else:
      c.append(0)

c[:10]

from sklearn.metrics import accuracy_score ,classification_report,confusion_matrix

# Accuracy 

accuracy_score(test_data.classes , c)

confusion_matrix(test_data.classes , c)

# 2023 
530 + 481 + 498 + 514

print(classification_report(test_data.classes , c))

"""To overcome the overfitting problem increase keral layers and give few parameters which works fine https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator"""

# Now downloading the 2 cat and 2 dog images from internt and checking with developed model

import matplotlib.pyplot as plt 
img = plt.imread('/content/Cat03.jpg')
print(img)
print(img.shape)
plt.imshow(img)

import cv2

# create a function to take the image from its path 

def prediction(path):
  # load the image 
  image = plt.imread(path)
#  print(image)
  print(image.shape)
  # since training has be done with 150 , 150 so we need to resize the image into 150,150
  image = cv2.resize(image , (150,150))
  print(image.shape)
  # since the training was done with pixel values after scaling down to 0 - 1 so for test also we need to scale down into 0 - 1
  image = np.array(image) / 255.0
 # print(image)
  # Now we need to make sure convert data into Deep learning CNN trained Manner 
  image = np.expand_dims(image , axis = 0)
  print(image.shape)
  # print(image)
  # Now give the data to trained model
  result = model.predict(image)
  print(result)
  if result[0][0] > 0.5:
    print('The Prediction is = Dog')
  else:
    print('The Prediction is = Cat') 
  img = plt.imread(path)
  plt.imshow(img)

prediction('/content/Cat03.jpg')

prediction('/content/download (4).jpg')

prediction('/content/download (5).jpg')

prediction('/content/images.jpg')